// Copyright 2023 The AthanorLabs/atomic-swap Authors
// SPDX-License-Identifier: LGPL-3.0-only

package contracts

import (
	"bytes"
	"context"
	"errors"
	"fmt"

	"github.com/athanorlabs/atomic-swap/common"

	"github.com/athanorlabs/go-relayer/impls/gsnforwarder"
	ethcommon "github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/ethclient"
)

// expectedSwapCreatorBytecodeHex is generated by deploying an instance of SwapCreator.sol
// with the trustedForwarder address set to all zeros and reading back the bytecode. See
// the unit test TestExpectedSwapCreatorBytecodeHex if you need to update this value.
const (
	expectedSwapCreatorBytecodeHex = "6080604052600436106100865760003560e01c806373e4771c1161005957806373e4771c14610145578063b32d1b4f1461016e578063c41e46cf146101ab578063eb84e7f2146101db578063fcaf229c1461021857610086565b80631e6c5acc1461008b57806356c022bb146100b4578063572b6c05146100df5780635cb969161461011c575b600080fd5b34801561009757600080fd5b506100b260048036038101906100ad9190611615565b610241565b005b3480156100c057600080fd5b506100c96105c4565b6040516100d69190611666565b60405180910390f35b3480156100eb57600080fd5b5061010660048036038101906101019190611681565b6105e8565b60405161011391906116c9565b60405180910390f35b34801561012857600080fd5b50610143600480360381019061013e9190611615565b610640565b005b34801561015157600080fd5b5061016c600480360381019061016791906116e4565b610766565b005b34801561017a57600080fd5b506101956004803603810190610190919061173a565b6109ac565b6040516101a291906116c9565b60405180910390f35b6101c560048036038101906101c0919061177a565b610ab1565b6040516101d2919061183f565b60405180910390f35b3480156101e757600080fd5b5061020260048036038101906101fd919061185a565b610e35565b60405161020f91906118fe565b60405180910390f35b34801561022457600080fd5b5061023f600480360381019061023a9190611919565b610e55565b005b6000826040516020016102549190611a3a565b604051602081830303815290604052805190602001209050600080600083815260200190815260200160002060009054906101000a900460ff169050600060038111156102a4576102a3611887565b5b8160038111156102b7576102b6611887565b5b036102ee576040517f1115766700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60038081111561030157610300611887565b5b81600381111561031457610313611887565b5b0361034b576040517f066916a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff16846000015173ffffffffffffffffffffffffffffffffffffffff16146103b4576040517f2919448600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8360a00151421080156103f9575083608001514211806103f85750600260038111156103e3576103e2611887565b5b8160038111156103f6576103f5611887565b5b145b5b15610430576040517f65430c1e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61043e838560600151610fd2565b82827e7c875846b687732a7579c19bb1dade66cd14e9f4f809565e2b2b5e76c72b4f60405160405180910390a3600360008084815260200190815260200160002060006101000a81548160ff021916908360038111156104a1576104a0611887565b5b0217905550600073ffffffffffffffffffffffffffffffffffffffff168460c0015173ffffffffffffffffffffffffffffffffffffffff160361053257836000015173ffffffffffffffffffffffffffffffffffffffff166108fc8560e001519081150290604051600060405180830381858888f1935050505015801561052c573d6000803e3d6000fd5b506105be565b8360c0015173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb85600001518660e001516040518363ffffffff1660e01b8152600401610579929190611ac4565b6020604051808303816000875af1158015610598573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105bc9190611b19565b505b50505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16149050919050565b61064a828261101c565b600073ffffffffffffffffffffffffffffffffffffffff168260c0015173ffffffffffffffffffffffffffffffffffffffff16036106d657816020015173ffffffffffffffffffffffffffffffffffffffff166108fc8360e001519081150290604051600060405180830381858888f193505050501580156106d0573d6000803e3d6000fd5b50610762565b8160c0015173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83602001518460e001516040518363ffffffff1660e01b815260040161071d929190611ac4565b6020604051808303816000875af115801561073c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107609190611b19565b505b5050565b61076f336105e8565b6107a5576040517ffc5d4daa00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6107af838361101c565b600073ffffffffffffffffffffffffffffffffffffffff168360c0015173ffffffffffffffffffffffffffffffffffffffff160361088d57826020015173ffffffffffffffffffffffffffffffffffffffff166108fc828560e001516108159190611b75565b9081150290604051600060405180830381858888f19350505050158015610840573d6000803e3d6000fd5b503273ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610887573d6000803e3d6000fd5b506109a7565b8260c0015173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8460200151838660e001516108c29190611b75565b6040518363ffffffff1660e01b81526004016108df929190611ac4565b6020604051808303816000875af11580156108fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109229190611b19565b508260c0015173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb32836040518363ffffffff1660e01b8152600401610962929190611ba9565b6020604051808303816000875af1158015610981573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a59190611b19565b505b505050565b60008060016000601b7f79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f8179860001b7ffffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd036414180610a0857610a07611bd2565b5b7f79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798890960001b60405160008152602001604052604051610a4b9493929190611c91565b6020604051602081039080840390855afa158015610a6d573d6000803e3d6000fd5b5050506020604051035190508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161491505092915050565b6000808303610aec576040517f7c946ed700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603610b5e57348314610b59576040517faa7feadc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610be0565b8373ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b8152600401610b9b93929190611cd6565b6020604051808303816000875af1158015610bba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bde9190611b19565b505b610be86112f9565b33816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050898160400181815250508881606001818152505087816020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508642610c789190611d0d565b816080018181525050858742610c8e9190611d0d565b610c989190611d0d565b8160a0018181525050848160c0019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050838160e00181815250508281610100018181525050600081604051602001610d019190611a3a565b60405160208183030381529060405280519060200120905060006003811115610d2d57610d2c611887565b5b60008083815260200190815260200160002060009054906101000a900460ff166003811115610d5f57610d5e611887565b5b14610d96576040517f734530ce00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f91446ce035ac29998b5473504609a5ef5e961005daba4630a1684b63be848f56818c8c85608001518660a001518760c001518860e00151604051610de19796959493929190611d41565b60405180910390a1600160008083815260200190815260200160002060006101000a81548160ff02191690836003811115610e1f57610e1e611887565b5b0217905550809250505098975050505050505050565b60006020528060005260406000206000915054906101000a900460ff1681565b600081604051602001610e689190611a3a565b60405160208183030381529060405280519060200120905060016003811115610e9457610e93611887565b5b60008083815260200190815260200160002060009054906101000a900460ff166003811115610ec657610ec5611887565b5b14610efd576040517f1fc1f6a200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff16826000015173ffffffffffffffffffffffffffffffffffffffff1614610f66576040517f2919448600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260008083815260200190815260200160002060006101000a81548160ff02191690836003811115610f9c57610f9b611887565b5b0217905550807f5fc23b25552757626e08b316cc2387ad1bc70ee1594af7204db4ce0c39f5d15f60405160405180910390a25050565b610fe28260001c8260001c6109ac565b611018576040517fabab6bd700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b60008260405160200161102f9190611a3a565b604051602081830303815290604052805190602001209050600080600083815260200190815260200160002060009054906101000a900460ff1690506000600381111561107f5761107e611887565b5b81600381111561109257611091611887565b5b036110c9576040517f1115766700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6003808111156110dc576110db611887565b5b8160038111156110ef576110ee611887565b5b03611126576040517f066916a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b836020015173ffffffffffffffffffffffffffffffffffffffff166111496112bf565b73ffffffffffffffffffffffffffffffffffffffff1614611196576040517f68e2c81200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8360800151421080156111ce5750600260038111156111b8576111b7611887565b5b8160038111156111cb576111ca611887565b5b14155b15611205576040517fd71d60b500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8360a001514210611242576040517f497df9d100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611250838560400151610fd2565b82827f38d6042dbdae8e73a7f6afbabd3fbe0873f9f5ed3cd71294591c3908c2e65fee60405160405180910390a3600360008084815260200190815260200160002060006101000a81548160ff021916908360038111156112b4576112b3611887565b5b021790555050505050565b60006112ca336105e8565b156112de57601436033560601c90506112ed565b6112e66112f1565b90506112ee565b5b90565b600033905090565b604051806101200160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008019168152602001600080191681526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081525090565b6000604051905090565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6113ea826113a1565b810181811067ffffffffffffffff82111715611409576114086113b2565b5b80604052505050565b600061141c61138d565b905061142882826113e1565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006114588261142d565b9050919050565b6114688161144d565b811461147357600080fd5b50565b6000813590506114858161145f565b92915050565b6000819050919050565b61149e8161148b565b81146114a957600080fd5b50565b6000813590506114bb81611495565b92915050565b6000819050919050565b6114d4816114c1565b81146114df57600080fd5b50565b6000813590506114f1816114cb565b92915050565b60006115028261142d565b9050919050565b611512816114f7565b811461151d57600080fd5b50565b60008135905061152f81611509565b92915050565b6000610120828403121561154c5761154b61139c565b5b611557610120611412565b9050600061156784828501611476565b600083015250602061157b84828501611476565b602083015250604061158f848285016114ac565b60408301525060606115a3848285016114ac565b60608301525060806115b7848285016114e2565b60808301525060a06115cb848285016114e2565b60a08301525060c06115df84828501611520565b60c08301525060e06115f3848285016114e2565b60e083015250610100611608848285016114e2565b6101008301525092915050565b600080610140838503121561162d5761162c611397565b5b600061163b85828601611535565b92505061012061164d858286016114ac565b9150509250929050565b611660816114f7565b82525050565b600060208201905061167b6000830184611657565b92915050565b60006020828403121561169757611696611397565b5b60006116a584828501611520565b91505092915050565b60008115159050919050565b6116c3816116ae565b82525050565b60006020820190506116de60008301846116ba565b92915050565b600080600061016084860312156116fe576116fd611397565b5b600061170c86828701611535565b93505061012061171e868287016114ac565b925050610140611730868287016114e2565b9150509250925092565b6000806040838503121561175157611750611397565b5b600061175f858286016114e2565b9250506020611770858286016114e2565b9150509250929050565b600080600080600080600080610100898b03121561179b5761179a611397565b5b60006117a98b828c016114ac565b98505060206117ba8b828c016114ac565b97505060406117cb8b828c01611476565b96505060606117dc8b828c016114e2565b95505060806117ed8b828c016114e2565b94505060a06117fe8b828c01611520565b93505060c061180f8b828c016114e2565b92505060e06118208b828c016114e2565b9150509295985092959890939650565b6118398161148b565b82525050565b60006020820190506118546000830184611830565b92915050565b6000602082840312156118705761186f611397565b5b600061187e848285016114ac565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600481106118c7576118c6611887565b5b50565b60008190506118d8826118b6565b919050565b60006118e8826118ca565b9050919050565b6118f8816118dd565b82525050565b600060208201905061191360008301846118ef565b92915050565b600061012082840312156119305761192f611397565b5b600061193e84828501611535565b91505092915050565b6119508161144d565b82525050565b61195f8161148b565b82525050565b61196e816114c1565b82525050565b61197d816114f7565b82525050565b6101208201600082015161199a6000850182611947565b5060208201516119ad6020850182611947565b5060408201516119c06040850182611956565b5060608201516119d36060850182611956565b5060808201516119e66080850182611965565b5060a08201516119f960a0850182611965565b5060c0820151611a0c60c0850182611974565b5060e0820151611a1f60e0850182611965565b50610100820151611a34610100850182611965565b50505050565b600061012082019050611a506000830184611983565b92915050565b6000819050919050565b6000611a7b611a76611a718461142d565b611a56565b61142d565b9050919050565b6000611a8d82611a60565b9050919050565b6000611a9f82611a82565b9050919050565b611aaf81611a94565b82525050565b611abe816114c1565b82525050565b6000604082019050611ad96000830185611aa6565b611ae66020830184611ab5565b9392505050565b611af6816116ae565b8114611b0157600080fd5b50565b600081519050611b1381611aed565b92915050565b600060208284031215611b2f57611b2e611397565b5b6000611b3d84828501611b04565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611b80826114c1565b9150611b8b836114c1565b9250828203905081811115611ba357611ba2611b46565b5b92915050565b6000604082019050611bbe6000830185611657565b611bcb6020830184611ab5565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000819050919050565b60008160001b9050919050565b6000611c33611c2e611c2984611c01565b611c0b565b61148b565b9050919050565b611c4381611c18565b82525050565b6000819050919050565b600060ff82169050919050565b6000611c7b611c76611c7184611c49565b611a56565b611c53565b9050919050565b611c8b81611c60565b82525050565b6000608082019050611ca66000830187611c3a565b611cb36020830186611c82565b611cc06040830185611830565b611ccd6060830184611830565b95945050505050565b6000606082019050611ceb6000830186611657565b611cf86020830185611657565b611d056040830184611ab5565b949350505050565b6000611d18826114c1565b9150611d23836114c1565b9250828201905080821115611d3b57611d3a611b46565b5b92915050565b600060e082019050611d56600083018a611830565b611d636020830189611830565b611d706040830188611830565b611d7d6060830187611ab5565b611d8a6080830186611ab5565b611d9760a0830185611657565b611da460c0830184611ab5565b9897505050505050505056fea26469706673582212209753cdf2d7811afea9a381d553b332e370ff6dc1491d4f7427c10ebf1e53f5a064736f6c63430008130033" //nolint:lll

	ethAddrByteLen = len(ethcommon.Address{}) // 20 bytes
)

// forwarderAddrIndices is a slice of the start indices where the trusted forwarder
// address is compiled into the deployed contract byte code. When verifying the bytecode
// of a deployed contract, we need special treatment for these identical 20-byte address
// blocks. See TestForwarderAddrIndexes to update the values.
var forwarderAddrIndices = []int{1490, 1528}

var (
	errInvalidSwapCreatorContract = errors.New("given contract address does not contain correct SwapCreator code")
	errInvalidForwarderContract   = errors.New("given contract address does not contain correct Forwarder code")
)

// CheckSwapCreatorContractCode checks that the bytecode at the given address matches the
// SwapCreator.sol contract. The trusted forwarder address that the contract was deployed
// with is parsed out from the byte code and returned.
func CheckSwapCreatorContractCode(
	ctx context.Context,
	ec *ethclient.Client,
	contractAddr ethcommon.Address,
) (ethcommon.Address, error) {
	code, err := ec.CodeAt(ctx, contractAddr, nil)
	if err != nil {
		return ethcommon.Address{}, err
	}

	expectedCode := ethcommon.FromHex(expectedSwapCreatorBytecodeHex)

	if len(code) != len(expectedCode) {
		return ethcommon.Address{}, fmt.Errorf("length mismatch: %w", errInvalidSwapCreatorContract)
	}

	allZeroAddr := ethcommon.Address{}

	// we fill this in with the trusted forwarder that the contract was deployed with
	var forwarderAddr ethcommon.Address

	for i, addrIndex := range forwarderAddrIndices {
		curAddr := code[addrIndex : addrIndex+ethAddrByteLen]
		if i == 0 {
			// initialise the trusted forwarder address on the first index
			copy(forwarderAddr[:], curAddr)
		} else {
			// check that any remaining forwarder addresses match the one we found at the first index
			if !bytes.Equal(curAddr, forwarderAddr[:]) {
				return ethcommon.Address{}, errInvalidSwapCreatorContract
			}
		}

		// Zero out the trusted forwarder address in the code, so that we can compare the
		// read in byte code with a copy of the contract code that was deployed using an
		// all-zero trusted forwarder address. curAddr and code have the same backing
		// array, so we are updating expectedCode as well here:
		copy(curAddr, allZeroAddr[:])
	}

	// Now that the trusted forwarder addresses have been zeroed out, the read-in contract code should
	// match the expected code.
	if !bytes.Equal(expectedCode, code) {
		return ethcommon.Address{}, errInvalidSwapCreatorContract
	}

	if (forwarderAddr == ethcommon.Address{}) {
		return forwarderAddr, nil
	}

	err = CheckForwarderContractCode(ctx, ec, forwarderAddr)
	if err != nil {
		return ethcommon.Address{}, err
	}

	// return the trusted forwarder address that was parsed from the deployed contract byte code
	return forwarderAddr, nil
}

// CheckForwarderContractCode checks that the trusted forwarder contract used by
// the given swap contract has the expected bytecode.
func CheckForwarderContractCode(
	ctx context.Context,
	ec *ethclient.Client,
	contractAddr ethcommon.Address,
) error {
	// mainnet override - since the forwarder contract deployed on mainnet is compiled
	// with solidity 0.8.7, but we're using 0.8.19 for SwapCreator.sol, we can just
	// check that the address is what's expected.
	chainID, err := ec.ChainID(ctx)
	if err != nil {
		return err
	}

	if contractAddr == common.MainnetConfig().ForwarderAddr && chainID.Uint64() == common.MainnetChainID {
		return nil
	}

	code, err := ec.CodeAt(ctx, contractAddr, nil)
	if err != nil {
		return err
	}

	expectedCode := ethcommon.FromHex(gsnforwarder.ForwarderMetaData.Bin)

	// expectedCode is the compiled code, while code is the deployed bytecode.
	// the deployed bytecode is a subset of the compiled code.
	if !bytes.Equal(expectedCode[705:9585], code) {
		return errInvalidForwarderContract
	}

	return nil
}
