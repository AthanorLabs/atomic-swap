// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/athanorlabs/atomic-swap/protocol/backend (interfaces: RecoveryDB)

// Package backend is a generated GoMock package.
package backend

import (
	reflect "reflect"

	common "github.com/athanorlabs/atomic-swap/common"
	mcrypto "github.com/athanorlabs/atomic-swap/crypto/monero"
	contracts "github.com/athanorlabs/atomic-swap/ethereum"
	common0 "github.com/ethereum/go-ethereum/common"
	gomock "github.com/golang/mock/gomock"
)

// MockRecoveryDB is a mock of RecoveryDB interface.
type MockRecoveryDB struct {
	ctrl     *gomock.Controller
	recorder *MockRecoveryDBMockRecorder
}

// MockRecoveryDBMockRecorder is the mock recorder for MockRecoveryDB.
type MockRecoveryDBMockRecorder struct {
	mock *MockRecoveryDB
}

// NewMockRecoveryDB creates a new mock instance.
func NewMockRecoveryDB(ctrl *gomock.Controller) *MockRecoveryDB {
	mock := &MockRecoveryDB{ctrl: ctrl}
	mock.recorder = &MockRecoveryDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRecoveryDB) EXPECT() *MockRecoveryDBMockRecorder {
	return m.recorder
}

// PutContractAddress mocks base method.
func (m *MockRecoveryDB) PutContractAddress(arg0 common0.Hash, arg1 common0.Address) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutContractAddress", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutContractAddress indicates an expected call of PutContractAddress.
func (mr *MockRecoveryDBMockRecorder) PutContractAddress(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutContractAddress", reflect.TypeOf((*MockRecoveryDB)(nil).PutContractAddress), arg0, arg1)
}

// PutContractSwapInfo mocks base method.
func (m *MockRecoveryDB) PutContractSwapInfo(arg0 common0.Hash, arg1 [32]byte, arg2 contracts.SwapFactorySwap) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutContractSwapInfo", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutContractSwapInfo indicates an expected call of PutContractSwapInfo.
func (mr *MockRecoveryDBMockRecorder) PutContractSwapInfo(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutContractSwapInfo", reflect.TypeOf((*MockRecoveryDB)(nil).PutContractSwapInfo), arg0, arg1, arg2)
}

// PutSharedSwapPrivateKey mocks base method.
func (m *MockRecoveryDB) PutSharedSwapPrivateKey(arg0 common0.Hash, arg1 *mcrypto.PrivateKeyPair, arg2 common.Environment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutSharedSwapPrivateKey", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutSharedSwapPrivateKey indicates an expected call of PutSharedSwapPrivateKey.
func (mr *MockRecoveryDBMockRecorder) PutSharedSwapPrivateKey(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutSharedSwapPrivateKey", reflect.TypeOf((*MockRecoveryDB)(nil).PutSharedSwapPrivateKey), arg0, arg1, arg2)
}

// PutSwapPrivateKey mocks base method.
func (m *MockRecoveryDB) PutSwapPrivateKey(arg0 common0.Hash, arg1 *mcrypto.PrivateKeyPair, arg2 common.Environment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutSwapPrivateKey", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutSwapPrivateKey indicates an expected call of PutSwapPrivateKey.
func (mr *MockRecoveryDBMockRecorder) PutSwapPrivateKey(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutSwapPrivateKey", reflect.TypeOf((*MockRecoveryDB)(nil).PutSwapPrivateKey), arg0, arg1, arg2)
}
