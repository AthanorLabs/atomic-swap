// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/athanorlabs/atomic-swap/protocol/swap (interfaces: Database)

// Package swap is a generated GoMock package.
package swap

import (
	reflect "reflect"

	common "github.com/ethereum/go-ethereum/common"
	gomock "github.com/golang/mock/gomock"
)

// MockDatabase is a mock of Database interface.
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase.
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance.
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// GetAllSwaps mocks base method.
func (m *MockDatabase) GetAllSwaps() ([]*Info, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSwaps")
	ret0, _ := ret[0].([]*Info)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSwaps indicates an expected call of GetAllSwaps.
func (mr *MockDatabaseMockRecorder) GetAllSwaps() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSwaps", reflect.TypeOf((*MockDatabase)(nil).GetAllSwaps))
}

// GetSwap mocks base method.
func (m *MockDatabase) GetSwap(arg0 common.Hash) (*Info, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSwap", arg0)
	ret0, _ := ret[0].(*Info)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSwap indicates an expected call of GetSwap.
func (mr *MockDatabaseMockRecorder) GetSwap(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSwap", reflect.TypeOf((*MockDatabase)(nil).GetSwap), arg0)
}

// HasSwap mocks base method.
func (m *MockDatabase) HasSwap(arg0 common.Hash) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasSwap", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasSwap indicates an expected call of HasSwap.
func (mr *MockDatabaseMockRecorder) HasSwap(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasSwap", reflect.TypeOf((*MockDatabase)(nil).HasSwap), arg0)
}

// PutSwap mocks base method.
func (m *MockDatabase) PutSwap(arg0 *Info) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutSwap", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutSwap indicates an expected call of PutSwap.
func (mr *MockDatabaseMockRecorder) PutSwap(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutSwap", reflect.TypeOf((*MockDatabase)(nil).PutSwap), arg0)
}
