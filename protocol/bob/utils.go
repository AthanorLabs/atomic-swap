package bob

import (
	"bytes"
	"context"

	"github.com/noot/atomic-swap/net/message"
	"github.com/noot/atomic-swap/swapfactory"

	ethcommon "github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/ethclient"
)

//nolint
var swapFactoryRuntimeBin = "0x6080604052600436106100705760003560e01c80637069c7f31161004e5780637069c7f3146100ec578063b32d1b4f1461010c578063d749b6c41461012c578063eb84e7f21461014d57600080fd5b8063262cd8da14610075578063268a3bd4146100975780633e7a7b55146100cc575b600080fd5b34801561008157600080fd5b50610095610090366004610bbc565b61018a565b005b3480156100a357600080fd5b506100b76100b2366004610b38565b6103f8565b60405190151581526020015b60405180910390f35b3480156100d857600080fd5b506100956100e7366004610b98565b610426565b3480156100f857600080fd5b50610095610107366004610bbc565b61057c565b34801561011857600080fd5b506100b7610127366004610be9565b6107d0565b61013f61013a366004610b51565b61089f565b6040519081526020016100c3565b34801561015957600080fd5b5061017d610168366004610b38565b60006020819052908152604090205460ff1681565b6040516100c39190610c0b565b60008260405160200161019d9190610c33565b60408051601f19818403018152918152815160209283012060008181529283905291205490915060ff1660038160038111156101db576101db610ce5565b141580156101fb575060008160038111156101f8576101f8610ce5565b14155b6102485760405162461bcd60e51b81526020600482015260196024820152781cddd85c081a5cc8185b1c9958591e4818dbdb5c1b195d1959603a1b60448201526064015b60405180910390fd5b83516001600160a01b031633146102b15760405162461bcd60e51b815260206004820152602760248201527f726566756e64206d7573742062652063616c6c65642062792074686520737761604482015266381037bbb732b960c91b606482015260840161023f565b8360a00151421015806102e457508360800151421080156102e4575060028160038111156102e1576102e1610ce5565b14155b6103565760405162461bcd60e51b815260206004820152603f60248201527f697427732074686520636f756e74657270617274792773207475726e2c20756e60448201527f61626c6520746f20726566756e642c2074727920616761696e206c6174657200606482015260840161023f565b6103648385606001516109f7565b60408051838152602081018590527e7c875846b687732a7579c19bb1dade66cd14e9f4f809565e2b2b5e76c72b4f910160405180910390a1835160c08501516040516001600160a01b039092169181156108fc0291906000818181858888f193505050501580156103d9573d6000803e3d6000fd5b50506000908152602081905260409020805460ff191660031790555050565b6000600260008381526020819052604090205460ff16600381111561041f5761041f610ce5565b1492915050565b6000816040516020016104399190610c33565b60408051601f1981840301815291905280516020909101209050600160008281526020819052604090205460ff16600381111561047857610478610ce5565b146104c55760405162461bcd60e51b815260206004820152601c60248201527f73776170206973206e6f7420696e2050454e44494e4720737461746500000000604482015260640161023f565b81516001600160a01b0316331461052d5760405162461bcd60e51b815260206004820152602660248201527f6f6e6c79207468652073776170206f776e65722063616e2063616c6c207365746044820152655f726561647960d01b606482015260840161023f565b60008181526020818152604091829020805460ff1916600217905590518281527f5fc23b25552757626e08b316cc2387ad1bc70ee1594af7204db4ce0c39f5d15f910160405180910390a15050565b60008260405160200161058f9190610c33565b60408051601f19818403018152918152815160209283012060008181529283905291205490915060ff1660038160038111156105cd576105cd610ce5565b141580156105ed575060008160038111156105ea576105ea610ce5565b14155b6106355760405162461bcd60e51b81526020600482015260196024820152781cddd85c081a5cc8185b1c9958591e4818dbdb5c1b195d1959603a1b604482015260640161023f565b83602001516001600160a01b0316336001600160a01b03161461069a5760405162461bcd60e51b815260206004820152601760248201527f6f6e6c7920636c61696d65722063616e20636c61696d21000000000000000000604482015260640161023f565b8360800151421015806106be575060028160038111156106bc576106bc610ce5565b145b6107005760405162461bcd60e51b8152602060048201526013602482015272746f6f206561726c7920746f20636c61696d2160681b604482015260640161023f565b8360a0015142106107485760405162461bcd60e51b8152602060048201526012602482015271746f6f206c61746520746f20636c61696d2160701b604482015260640161023f565b6107568385604001516109f7565b60408051838152602081018590527f38d6042dbdae8e73a7f6afbabd3fbe0873f9f5ed3cd71294591c3908c2e65fee910160405180910390a183602001516001600160a01b03166108fc8560c001519081150290604051600060405180830381858888f193505050501580156103d9573d6000803e3d6000fd5b600080600181601b7f79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f8179870014551231950b75fc4402da1732fc9bebe197f79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f8179889096040805160008152602081018083529590955260ff909316928401929092526060830152608082015260a0016020604051602081039080840390855afa15801561087d573d6000803e3d6000fd5b5050604051601f1901516001600160a01b038581169116149250505092915050565b604080516101008101825260006080820181905260a0820181905260c0820181905260e082018190523382526001600160a01b0386166020830152918101879052606081018690526108f18442610c98565b6080820152610901846002610cb0565b61090b9042610c98565b60a08201523460c082015260e08101839052604051600090610931908390602001610c33565b60408051601f19818403018152919052805160209091012090506000808281526020819052604090205460ff16600381111561096f5761096f610ce5565b1461097957600080fd5b60808083015160a08085015160408051868152602081018e90529081018c90526060810193909352928201929092527f8116b8ce401b5f8f3bb3b91fc2ac461b29ffe582eff877d50fb5a9f9e54306be910160405180910390a16000818152602081905260409020805460ff19166001179055979650505050505050565b610a0182826107d0565b610a6c5760405162461bcd60e51b815260206004820152603660248201527f70726f76696465642073656372657420646f6573206e6f74206d6174636820746044820152756865206578706563746564207075626c6963206b657960501b606482015260840161023f565b5050565b80356001600160a01b0381168114610a8757600080fd5b919050565b6000610100808385031215610aa057600080fd5b6040519081019067ffffffffffffffff82118183101715610ad157634e487b7160e01b600052604160045260246000fd5b81604052809250610ae184610a70565b8152610aef60208501610a70565b602082015260408401356040820152606084013560608201526080840135608082015260a084013560a082015260c084013560c082015260e084013560e0820152505092915050565b600060208284031215610b4a57600080fd5b5035919050565b600080600080600060a08688031215610b6957600080fd5b8535945060208601359350610b8060408701610a70565b94979396509394606081013594506080013592915050565b60006101008284031215610bab57600080fd5b610bb58383610a8c565b9392505050565b6000806101208385031215610bd057600080fd5b610bda8484610a8c565b94610100939093013593505050565b60008060408385031215610bfc57600080fd5b50508035926020909101359150565b6020810160048310610c2d57634e487b7160e01b600052602160045260246000fd5b91905290565b60006101008201905060018060a01b038084511683528060208501511660208401525060408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015292915050565b60008219821115610cab57610cab610ccf565b500190565b6000816000190483118215151615610cca57610cca610ccf565b500290565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fdfea2646970667358221220627fa45e940631ead812b269c3736bcec07dd6f83f861cf82035151ef643a4aa64736f6c63430008050033"

func checkContractCode(ctx context.Context, ec *ethclient.Client, contractAddr ethcommon.Address) error {
	code, err := ec.CodeAt(ctx, contractAddr, nil)
	if err != nil {
		return err
	}

	expectedCode := ethcommon.FromHex(swapFactoryRuntimeBin)
	if !bytes.Contains(expectedCode, code) {
		return errInvalidSwapContract
	}

	return nil
}

func convertContractSwap(msg *message.ContractSwap) swapfactory.SwapFactorySwap {
	return swapfactory.SwapFactorySwap{
		Owner:        msg.Owner,
		Claimer:      msg.Claimer,
		PubKeyClaim:  msg.PubKeyClaim,
		PubKeyRefund: msg.PubKeyRefund,
		Timeout0:     msg.Timeout0,
		Timeout1:     msg.Timeout1,
		Value:        msg.Value,
		Nonce:        msg.Nonce,
	}
}
