// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/athanorlabs/atomic-swap/protocol/backend (interfaces: Backend)

// Package xmrmaker is a generated GoMock package.
package xmrmaker

import (
	context "context"
	reflect "reflect"
	time "time"

	common "github.com/athanorlabs/atomic-swap/common"
	mcrypto "github.com/athanorlabs/atomic-swap/crypto/monero"
	contracts "github.com/athanorlabs/atomic-swap/ethereum"
	extethclient "github.com/athanorlabs/atomic-swap/ethereum/extethclient"
	monero "github.com/athanorlabs/atomic-swap/monero"
	net "github.com/athanorlabs/atomic-swap/net"
	message "github.com/athanorlabs/atomic-swap/net/message"
	swap "github.com/athanorlabs/atomic-swap/protocol/swap"
	txsender "github.com/athanorlabs/atomic-swap/protocol/txsender"
	common0 "github.com/ethereum/go-ethereum/common"
	gomock "github.com/golang/mock/gomock"
)

// MockBackend is a mock of Backend interface.
type MockBackend struct {
	ctrl     *gomock.Controller
	recorder *MockBackendMockRecorder
}

// MockBackendMockRecorder is the mock recorder for MockBackend.
type MockBackendMockRecorder struct {
	mock *MockBackend
}

// NewMockBackend creates a new mock instance.
func NewMockBackend(ctrl *gomock.Controller) *MockBackend {
	mock := &MockBackend{ctrl: ctrl}
	mock.recorder = &MockBackendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBackend) EXPECT() *MockBackendMockRecorder {
	return m.recorder
}

// ClearXMRDepositAddress mocks base method.
func (m *MockBackend) ClearXMRDepositAddress(arg0 common0.Hash) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ClearXMRDepositAddress", arg0)
}

// ClearXMRDepositAddress indicates an expected call of ClearXMRDepositAddress.
func (mr *MockBackendMockRecorder) ClearXMRDepositAddress(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearXMRDepositAddress", reflect.TypeOf((*MockBackend)(nil).ClearXMRDepositAddress), arg0)
}

// Contract mocks base method.
func (m *MockBackend) Contract() *contracts.SwapFactory {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Contract")
	ret0, _ := ret[0].(*contracts.SwapFactory)
	return ret0
}

// Contract indicates an expected call of Contract.
func (mr *MockBackendMockRecorder) Contract() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Contract", reflect.TypeOf((*MockBackend)(nil).Contract))
}

// ContractAddr mocks base method.
func (m *MockBackend) ContractAddr() common0.Address {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContractAddr")
	ret0, _ := ret[0].(common0.Address)
	return ret0
}

// ContractAddr indicates an expected call of ContractAddr.
func (mr *MockBackendMockRecorder) ContractAddr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContractAddr", reflect.TypeOf((*MockBackend)(nil).ContractAddr))
}

// Ctx mocks base method.
func (m *MockBackend) Ctx() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ctx")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Ctx indicates an expected call of Ctx.
func (mr *MockBackendMockRecorder) Ctx() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ctx", reflect.TypeOf((*MockBackend)(nil).Ctx))
}

// ETH mocks base method.
func (m *MockBackend) ETH() extethclient.EthClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ETH")
	ret0, _ := ret[0].(extethclient.EthClient)
	return ret0
}

// ETH indicates an expected call of ETH.
func (mr *MockBackendMockRecorder) ETH() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ETH", reflect.TypeOf((*MockBackend)(nil).ETH))
}

// Env mocks base method.
func (m *MockBackend) Env() common.Environment {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Env")
	ret0, _ := ret[0].(common.Environment)
	return ret0
}

// Env indicates an expected call of Env.
func (mr *MockBackendMockRecorder) Env() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Env", reflect.TypeOf((*MockBackend)(nil).Env))
}

// Net mocks base method.
func (m *MockBackend) Net() net.MessageSender {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Net")
	ret0, _ := ret[0].(net.MessageSender)
	return ret0
}

// Net indicates an expected call of Net.
func (mr *MockBackendMockRecorder) Net() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Net", reflect.TypeOf((*MockBackend)(nil).Net))
}

// NewSwapFactory mocks base method.
func (m *MockBackend) NewSwapFactory(arg0 common0.Address) (*contracts.SwapFactory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewSwapFactory", arg0)
	ret0, _ := ret[0].(*contracts.SwapFactory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewSwapFactory indicates an expected call of NewSwapFactory.
func (mr *MockBackendMockRecorder) NewSwapFactory(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewSwapFactory", reflect.TypeOf((*MockBackend)(nil).NewSwapFactory), arg0)
}

// NewTxSender mocks base method.
func (m *MockBackend) NewTxSender(arg0 common0.Address, arg1 *contracts.IERC20) (txsender.Sender, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewTxSender", arg0, arg1)
	ret0, _ := ret[0].(txsender.Sender)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewTxSender indicates an expected call of NewTxSender.
func (mr *MockBackendMockRecorder) NewTxSender(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewTxSender", reflect.TypeOf((*MockBackend)(nil).NewTxSender), arg0, arg1)
}

// SendSwapMessage mocks base method.
func (m *MockBackend) SendSwapMessage(arg0 message.Message, arg1 common0.Hash) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendSwapMessage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendSwapMessage indicates an expected call of SendSwapMessage.
func (mr *MockBackendMockRecorder) SendSwapMessage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendSwapMessage", reflect.TypeOf((*MockBackend)(nil).SendSwapMessage), arg0, arg1)
}

// SetBaseXMRDepositAddress mocks base method.
func (m *MockBackend) SetBaseXMRDepositAddress(arg0 mcrypto.Address) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetBaseXMRDepositAddress", arg0)
}

// SetBaseXMRDepositAddress indicates an expected call of SetBaseXMRDepositAddress.
func (mr *MockBackendMockRecorder) SetBaseXMRDepositAddress(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBaseXMRDepositAddress", reflect.TypeOf((*MockBackend)(nil).SetBaseXMRDepositAddress), arg0)
}

// SetSwapTimeout mocks base method.
func (m *MockBackend) SetSwapTimeout(arg0 time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSwapTimeout", arg0)
}

// SetSwapTimeout indicates an expected call of SetSwapTimeout.
func (mr *MockBackendMockRecorder) SetSwapTimeout(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSwapTimeout", reflect.TypeOf((*MockBackend)(nil).SetSwapTimeout), arg0)
}

// SetXMRDepositAddress mocks base method.
func (m *MockBackend) SetXMRDepositAddress(arg0 mcrypto.Address, arg1 common0.Hash) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetXMRDepositAddress", arg0, arg1)
}

// SetXMRDepositAddress indicates an expected call of SetXMRDepositAddress.
func (mr *MockBackendMockRecorder) SetXMRDepositAddress(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetXMRDepositAddress", reflect.TypeOf((*MockBackend)(nil).SetXMRDepositAddress), arg0, arg1)
}

// SwapManager mocks base method.
func (m *MockBackend) SwapManager() swap.Manager {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SwapManager")
	ret0, _ := ret[0].(swap.Manager)
	return ret0
}

// SwapManager indicates an expected call of SwapManager.
func (mr *MockBackendMockRecorder) SwapManager() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SwapManager", reflect.TypeOf((*MockBackend)(nil).SwapManager))
}

// SwapTimeout mocks base method.
func (m *MockBackend) SwapTimeout() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SwapTimeout")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// SwapTimeout indicates an expected call of SwapTimeout.
func (mr *MockBackendMockRecorder) SwapTimeout() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SwapTimeout", reflect.TypeOf((*MockBackend)(nil).SwapTimeout))
}

// XMR mocks base method.
func (m *MockBackend) XMR() monero.WalletClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XMR")
	ret0, _ := ret[0].(monero.WalletClient)
	return ret0
}

// XMR indicates an expected call of XMR.
func (mr *MockBackendMockRecorder) XMR() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XMR", reflect.TypeOf((*MockBackend)(nil).XMR))
}

// XMRDepositAddress mocks base method.
func (m *MockBackend) XMRDepositAddress(arg0 *common0.Hash) (mcrypto.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XMRDepositAddress", arg0)
	ret0, _ := ret[0].(mcrypto.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// XMRDepositAddress indicates an expected call of XMRDepositAddress.
func (mr *MockBackendMockRecorder) XMRDepositAddress(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XMRDepositAddress", reflect.TypeOf((*MockBackend)(nil).XMRDepositAddress), arg0)
}
